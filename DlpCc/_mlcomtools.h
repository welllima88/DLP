#if !defined(AFX__MLCOMTOOLS_H__0AB2ECE1_8FD2_11D5_AFD6_0000F68597F0__INCLUDED_)
#define AFX__MLCOMTOOLS_H__0AB2ECE1_8FD2_11D5_AFD6_0000F68597F0__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// C_MLComTools wrapper class

class C_MLComTools : public CWnd
{
protected:
	DECLARE_DYNCREATE(C_MLComTools)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0xdfaa6c74, 0x1cea, 0x11d4, { 0x90, 0x3b, 0x0, 0x80, 0xc8, 0x24, 0xa0, 0x47 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	void ShowAbout();
	void ReceivePacket();
	BOOL EncryptFile(BSTR* strFileName, BSTR* strBuffer, short* intLength);
	CString WinDir();
	CString WinSysDir();
	long ConvertStrhToDec(BSTR* strToConvert);
	long ConvertStrdToDec(BSTR* strToConvert);
	void TwipsToPixel(short* intXvalue, short* intYvalue);
	void PixelToTwips(short* intXvalue, short* intYvalue);
	// method 'DecryptFile' not emitted because of invalid return type or parameter type
	long IsActive(VARIANT* hprog);
	VARIANT SuspendActivateExe(BSTR* strNameExe);
	CString addLRC8toString(BSTR* strPacket, short* initValue);
	short cLRC8str(BSTR* strPacket, short* intStart, short* intEnd, short* intInitial);
	short cLRC8file(BSTR* strFileName, long* longStart, long* longEnd, short* intInitial);
	// method 'cLRC8buffer' not emitted because of invalid return type or parameter type
	CString addCRC16toString(BSTR* strPacket, short* initValue, short* Polynomial);
	long cCRC16str(BSTR* strPacket, short* intStart, short* intEnd, short* intInitial, short* intPolynomial);
	long cCRC16file(BSTR* strFileName, long* longStart, long* longEnd, short* intInitial, short* intPolynomial);
	// method 'cCRC16buffer' not emitted because of invalid return type or parameter type
	short cCHECKSUMstr(BSTR* strPacket, short* intStart, short* intEnd, short* intInitial);
	short cCHECKSUMfile(BSTR* strFileName, long* longStart, long* longEnd, short* intInitial);
	// method 'cCHECKSUMbuffer' not emitted because of invalid return type or parameter type
	// method 'GetCommandLine' not emitted because of invalid return type or parameter type
	BOOL TestStrHexa(BSTR* str);
	BOOL TestStrDec(BSTR* str);
	CString AddParityString(BSTR* str);
	CString SupParityString(BSTR* str);
	CString cStr1DtoDec(BSTR* strPacket, short* intStart, short* intEnd);
	CString cStr2DtoDec(BSTR* strPacket, short* intStart, short* intEnd);
	CString cStr3DtoDec(BSTR* strPacket, short* intStart, short* intEnd);
	CString cStr1HtoDec(BSTR* strPacket, short* intStart, short* intEnd);
	CString cStr2HtoDec(BSTR* strPacket, short* intStart, short* intEnd);
	CString c2DecToAsc(BSTR* strPacket, short* intStart, short* intEnd);
	CString c3DecToAsc(BSTR* strPacket, short* intStart, short* intEnd);
	CString c2HexToAsc(BSTR* strPacket, short* intStart, short* intEnd);
	BOOL CommInit(short* intPort, BSTR* strSettings);
	BOOL CommOpen();
	BOOL CommClose();
	BOOL SendMessageTestL3000(BSTR* strSend);
	void RecMessageTestL3000(BSTR* strRec, short* intStatus, long* longTimeOut);
	void MessageTestL3000(BSTR* strSend, BSTR* strRec, short* intStatus, long* longTimeOut);
	BOOL SendMessage(BSTR* strMessage);
	CString RecMessage(long* longTimeOut);
	CString Message(BSTR* strMessage, long* longTimeOut);
	CString POSMessage();
	VARIANT POSAutoIncSequence();
	CString POSAutoMessage(BSTR* Fct, long* lngTimeout);
	CString POSAutoAuthorization(BSTR* strAmount, BSTR* strCurrency, BSTR* strControl, BSTR* strClass, long* lngTimeout);
	CString POSAutoRecording(BSTR* strAmount, BSTR* strCurrency, long* lngTimeout);
	CString POSAutoReceiptMerchant(long* lngTimeout);
	CString POSAutoSettingExtReader(BSTR* strTrackISO1, BSTR* strTrackISO2, BSTR* strTrackISO3, long* lngTimeout);
	CString POSAutoReadingCard(BSTR* strReadingType, long* lngTimeout);
	CString POSAutoDisplayingPinPadRequest(BSTR* strText, BSTR* strInputType, BSTR* strMinLength, BSTR* strMaxLength, BSTR* strInputOffset, long* lngTimeout);
	CString POSAutoStatusRequest(long* lngTimeout);
	CString POSAutoSoftwareStatus(long* lngTimeout);
	CString POSAutoClearTransactionFile(long* lngTimeout);
	CString POSAutoAbortOperation(BSTR* strTreatment, long* lngTimeout);
	CString POSAutoSettingEFTConfiguration(BSTR* strCardReader, BSTR* strPrinter, BSTR* strBuzzer, BSTR* strRetroPinPad, long* lngTimeout);
	CString POSAutoSettingEFTApplication(BSTR* strApplicationCode, BSTR* strEFTNumber, long* lngTimeout);
	CString POSAutoBeep(BSTR* strNumBeep, long* lngTimeout);
	BOOL POSAutoSend(BSTR* Fct);
	BOOL POSsend();
	BOOL OpenSession();
	BOOL SendEnq();
	BOOL WaitAck();
	void WaitTimeout(long* longTimeOut);
	void WaitTORetry();
	short GetCommPort();
	void SetCommPort(short nNewValue);
	long GetTOwaitChar();
	void SetTOwaitChar(long nNewValue);
	long GetTOWaitBetweenCommand();
	void SetTOWaitBetweenCommand(long nNewValue);
	long GetTOBetweenChar();
	void SetTOBetweenChar(long nNewValue);
	long GetTOwaitRetry();
	void SetTOwaitRetry(long nNewValue);
	long GetTOwaitReply();
	void SetTOwaitReply(long nNewValue);
	short GetRetrySession();
	void SetRetrySession(short nNewValue);
	short GetRetryData();
	void SetRetryData(short nNewValue);
	CString GetCommSettings();
	void SetCommSettings(LPCTSTR lpszNewValue);
	BOOL GetCommPortOpen();
	void SetCommPortOpen(BOOL bNewValue);
	VARIANT GetCommInput();
	void SetCommOutput(const VARIANT& newValue);
	short GetCommInputLen();
	CString GetReceiveMessage();
	void SetReceiveMessage(LPCTSTR lpszNewValue);
	CString GetReceiveError();
	void SetReceiveError(LPCTSTR lpszNewValue);
	void SetCommInputLen(short nNewValue);
	void SetCommInputMode(short nNewValue);
	CString GetPOSNumber();
	void SetPOSNumber(LPCTSTR lpszNewValue);
	CString GetPOSAmount();
	void SetPOSAmount(LPCTSTR lpszNewValue);
	long GetPOSTimeout();
	void SetPOSTimeout(long nNewValue);
	CString GetPOSRep();
	void SetPOSRep(LPCTSTR lpszNewValue);
	CString GetPOSMode();
	void SetPOSMode(LPCTSTR lpszNewValue);
	CString GetPOSAutoTimeOut();
	void SetPOSAutoTimeOut(LPCTSTR lpszNewValue);
	CString GetPOSType();
	void SetPOSType(LPCTSTR lpszNewValue);
	CString GetPOSDev();
	void SetPOSDev(LPCTSTR lpszNewValue);
	BOOL GetEscapeKeyEnabled();
	void SetEscapeKeyEnabled(BOOL bNewValue);
	BOOL GetAbortReceive();
	void SetAbortReceive(BOOL bNewValue);
	CString GetVersion();
	BOOL GetReceiveEnabled();
	void SetReceiveEnabled(BOOL bNewValue);
	BOOL GetErrorEnabled();
	void SetErrorEnabled(BOOL bNewValue);
	CString GetEFTposNumber();
	CString GetEFTposStat();
	CString GetEFTposAmount();
	CString GetEFTposMode();
	CString GetEFTposRep();
	CString GetEFTposDev();
	CString GetPOSAutoSequence();
	void SetPOSAutoSequence(LPCTSTR lpszNewValue);
	CString GetPOSAutoOperation();
	void SetPOSAutoOperation(LPCTSTR lpszNewValue);
	CString GetPOSAutoAmount();
	void SetPOSAutoAmount(LPCTSTR lpszNewValue);
	CString GetPOSAutoCurrency();
	void SetPOSAutoCurrency(LPCTSTR lpszNewValue);
	CString GetPOSAutoControl();
	void SetPOSAutoControl(LPCTSTR lpszNewValue);
	CString GetPOSAutoClass();
	void SetPOSAutoClass(LPCTSTR lpszNewValue);
	CString GetPOSAutoTrackISO1();
	void SetPOSAutoTrackISO1(LPCTSTR lpszNewValue);
	CString GetPOSAutoTrackISO2();
	void SetPOSAutoTrackISO2(LPCTSTR lpszNewValue);
	CString GetPOSAutoTrackISO3();
	void SetPOSAutoTrackISO3(LPCTSTR lpszNewValue);
	CString GetPOSAutoReadingType();
	void SetPOSAutoReadingType(LPCTSTR lpszNewValue);
	CString GetPOSAutoText();
	void SetPOSAutoText(LPCTSTR lpszNewValue);
	CString GetPOSAutoInputType();
	void SetPOSAutoInputType(LPCTSTR lpszNewValue);
	CString GetPOSAutoMinLength();
	void SetPOSAutoMinLength(LPCTSTR lpszNewValue);
	CString GetPOSAutoMaxLength();
	void SetPOSAutoMaxLength(LPCTSTR lpszNewValue);
	CString GetPOSAutoInputOffset();
	void SetPOSAutoInputOffset(LPCTSTR lpszNewValue);
	CString GetPOSAutoTreatmentCard();
	void SetPOSAutoTreatmentCard(LPCTSTR lpszNewValue);
	CString GetPOSAutoCardReader();
	void SetPOSAutoCardReader(LPCTSTR lpszNewValue);
	CString GetPOSAutoPrinter();
	void SetPOSAutoPrinter(LPCTSTR lpszNewValue);
	CString GetPOSAutoBuzzer();
	void SetPOSAutoBuzzer(LPCTSTR lpszNewValue);
	CString GetPOSAutoRetroPinPad();
	void SetPOSAutoRetroPinPad(LPCTSTR lpszNewValue);
	CString GetPOSAutoApplicationCode();
	void SetPOSAutoApplicationCode(LPCTSTR lpszNewValue);
	CString GetPOSAutoEFTNumber();
	void SetPOSAutoEFTNumber(LPCTSTR lpszNewValue);
	CString GetPOSAutoData();
	void SetPOSAutoData(LPCTSTR lpszNewValue);
	CString GetPOSAutoNumBeep();
	void SetPOSAutoNumBeep(LPCTSTR lpszNewValue);
	long GetPOSAutoTOfctAuthorization();
	void SetPOSAutoTOfctAuthorization(long nNewValue);
	long GetPOSAutoTOfctAuthorizationInter();
	void SetPOSAutoTOfctAuthorizationInter(long nNewValue);
	long GetPOSAutoTOfctRecording();
	void SetPOSAutoTOfctRecording(long nNewValue);
	long GetPOSAutoTOfctReceiptMerchant();
	void SetPOSAutoTOfctReceiptMerchant(long nNewValue);
	long GetPOSAutoTOfctSettingExtReader();
	void SetPOSAutoTOfctSettingExtReader(long nNewValue);
	long GetPOSAutoTOfctReadingCard();
	void SetPOSAutoTOfctReadingCard(long nNewValue);
	long GetPOSAutoTOfctDisplayingPinPadRequest();
	void SetPOSAutoTOfctDisplayingPinPadRequest(long nNewValue);
	long GetPOSAutoTOfctStatusRequest();
	void SetPOSAutoTOfctStatusRequest(long nNewValue);
	long GetPOSAutoTOfctSoftwareStatus();
	void SetPOSAutoTOfctSoftwareStatus(long nNewValue);
	long GetPOSAutoTOfctClearTransactionFile();
	void SetPOSAutoTOfctClearTransactionFile(long nNewValue);
	long GetPOSAutoTOfctAbortOperation();
	void SetPOSAutoTOfctAbortOperation(long nNewValue);
	long GetPOSAutoTOfctSettingEFTConfiguration();
	void SetPOSAutoTOfctSettingEFTConfiguration(long nNewValue);
	long GetPOSAutoTOfctSettingEFTApplication();
	void SetPOSAutoTOfctSettingEFTApplication(long nNewValue);
	long GetPOSAutoTOfctBeep();
	void SetPOSAutoTOfctBeep(long nNewValue);
	BOOL GetPOSAutoIncSequenceEnabled();
	void SetPOSAutoIncSequenceEnabled(BOOL bNewValue);
	CString GetPOSAutoStatus();
	CString GetPOSAutoStatusCard();
	CString GetPOSAutoApplication();
	CString GetPOSAutoReceipt();
	CString GetPOSAutoPrivate();
	CString GetPOSAutoNbCharacter();
	CString GetPOSAutoString();
	CString GetPOSAutoStatusEFT();
	CString GetPOSAutoCode(short* index);
	CString GetPOSAutoVersion(short* index);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX__MLCOMTOOLS_H__0AB2ECE1_8FD2_11D5_AFD6_0000F68597F0__INCLUDED_)
