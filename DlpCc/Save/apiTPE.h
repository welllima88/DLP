/*****
* STM - Station de Travail Monétique
* API TPE - Communication Titus
* Couche API exportée par la DLL
* Portage DLL Windows 95 - Patrice BURIEZ (PBu) - Février 1998
*****
* apiTPE.h
*****/

#ifndef __APITPE_H__
#define __APITPE_H__

#include "apiSTM.h"

/*****
* Structures
*****/

#define TPE_STATUSTEXT_SIZE			(20 + 1)
#define TPE_STATUSCODE_TITUS_ED		0
#define TPE_STATUSCODE_TITUS_EDI	1
#define TPE_STATUSCODE_TITUS_EDP	2
#define TPE_STATUSCODE_TITUS_EDPI	3
#define TPE_STATUSCODE_ERR_POWER	10
#define TPE_STATUSCODE_ERR_PRINTER	11
#define TPE_STATUSCODE_ERR_PINPAD	12
#define TPE_STATUSCODE_CARD_NOTREAD	20
#define TPE_STATUSCODE_CARD_DUMB	21
#define TPE_STATUSCODE_CARD_MUTE	22
#define TPE_STATUSCODE_CARD_NOTBANK	30
#define TPE_STATUSCODE_CARD_BADAUTH	31
#define TPE_STATUSCODE_CARD_NOLIMIT	32
#define TPE_STATUSCODE_CARD_BADK497	33
#define TPE_STATUSCODE_CARD_LOCKED	40
#define TPE_STATUSCODE_CARD_EARLY	41
#define TPE_STATUSCODE_ERR_PROTOCOL	50
#define TPE_STATUSCODE_ERR_PROGRAM	51
#define TPE_STATUSCODE_TPE_NOANSWER	99
#define TPE_STATUSCODE_TPE_SWAPPED	98

typedef struct
{
	BYTE	byStatusCode;
	char	szStatusText[TPE_STATUSTEXT_SIZE];
	BYTE	abyAlign[2];
} TPE_STATUS, FAR* TPE_LPSTATUS;

#define TPE_READTRACK2DATA_SIZE		STM_CARDTRACK2DATA_SIZE
#define TPE_READTYPE_DEBIT_K497		0
#define TPE_READTYPE_DEBIT_TRACK	1
#define TPE_READTYPE_DEBIT_CHIP		2
#define TPE_READTYPE_DEBIT_ANY		3
#define TPE_READTYPE_CREDIT_ANY		4
#define TPE_READTYPE_MAX			4
#define TPE_READAMOUNT_MAX			STM_AMOUNT_MAX
#define TPE_READTERMINAL_MAX		STM_TERMINAL_MAX
#define TPE_READSTATUS_TRACK		STM_CARDSTATUS_TRACK
#define TPE_READSTATUS_CHIP			STM_CARDSTATUS_CHIP
#define TPE_READSTATUS_ALMOSTFULL	STM_CARDSTATUS_ALMOSTFULL
#define TPE_READSTATUS_FULL_TRANSAC	STM_CARDSTATUS_FULL_TRANSAC
#define TPE_READSTATUS_FULL_PIN		STM_CARDSTATUS_FULL_PIN
#define TPE_READSTATUS_VPP_FAILURE1	STM_CARDSTATUS_VPP_FAILURE1
#define TPE_READSTATUS_VPP_FAILUREN	STM_CARDSTATUS_VPP_FAILUREN
#define TPE_READCALL_NONE			STM_CARDCALL_NONE
#define TPE_READCALL_LIMIT_REACHED	STM_CARDCALL_LIMIT_REACHED
#define TPE_READCALL_FULL_TRANSAC	STM_CARDCALL_FULL_TRANSAC
#define TPE_READCALL_FULL_PIN		STM_CARDCALL_FULL_PIN

typedef struct
{
	BYTE	byReadType;
	BYTE	abyAlign[1];
	WORD	wReadTerminal;
	DWORD	dwReadAmount;
} TPE_READ_QUERY;

typedef struct
{
	BYTE	byReadStatus;
	BYTE	byReadCall;
	char	szReadTrack2Data[TPE_READTRACK2DATA_SIZE];
	BYTE	abyAlign[1];
} TPE_READ_REPLY, FAR* TPE_LPREAD_REPLY;

#define TPE_MESSAGETEXT_SIZE		(20 + 1)
#define TPE_MESSAGECODE_INSERT_CARD	0
#define TPE_MESSAGECODE_READING		1
#define TPE_MESSAGECODE_INSERT_CHIP	2
#define TPE_MESSAGECODE_PIN_FIRST	3
#define TPE_MESSAGECODE_PIN_SECOND	4
#define TPE_MESSAGECODE_PIN_THIRD	5
#define TPE_MESSAGECODE_VERIFYING	6

typedef struct
{
	BYTE	byMessageCode;
	char	szMessageText[TPE_MESSAGETEXT_SIZE];
	BYTE	abyAlign[2];
} TPE_MESSAGE, FAR* TPE_LPMESSAGE;

#define TPE_WRITETICKETHEADER_SIZE				(20 + 1)
#define TPE_WRITETICKETNAME_SIZE				(15 + 1)
#define TPE_WRITETICKETLOCATION_SIZE			(15 + 1)
#define TPE_WRITEMERCHANT_SIZE					STM_MERCHANT_SIZE
#define TPE_WRITEAPPROVALCODE_SIZE				STM_APPROVALCODE_SIZE
#define TPE_WRITECARDTYPE_SIZE					(10 + 1)
#define TPE_WRITECERTIFICATE_SIZE				STM_CARDCERTIFICATE_SIZE
#define TPE_WRITEWRITE_NO						0
#define TPE_WRITEWRITE_YES						1
#define TPE_WRITEWRITE_MAX						1
#define TPE_WRITEPRINT_NO						0
#define TPE_WRITEPRINT_YES						1
#define TPE_WRITEPRINT_MAX						1
#define TPE_WRITESYSTEM_MAX						STM_SYSTEM_MAX
#define TPE_WRITETERMINAL_MAX					STM_TERMINAL_MAX
#define TPE_WRITETRANSACTION_MAX				STM_TRANSACTION_MAX
#define TPE_WRITETRANSACTIONTYPE_DEBIT_NORMAL	0x20
#define TPE_WRITETRANSACTIONTYPE_DEBIT_APPROVED	0x40
#define TPE_WRITETRANSACTIONTYPE_DEBIT_FORCED	0x2A
#define TPE_WRITETRANSACTIONTYPE_CREDIT			0x2B
#define TPE_WRITEWRITTEN_NONE					0
#define TPE_WRITEWRITTEN_COMPLETED				1
#define TPE_WRITEWRITTEN_ALMOSTFULL				STM_CARDSTATUS_ALMOSTFULL
#define TPE_WRITEWRITTEN_FULL_TRANSAC			STM_CARDSTATUS_FULL_TRANSAC
#define TPE_WRITEWRITTEN_FULL_PIN				STM_CARDSTATUS_FULL_PIN
#define TPE_WRITEWRITTEN_VPP_FAILURE1			STM_CARDSTATUS_VPP_FAILURE1
#define TPE_WRITEWRITTEN_VPP_FAILUREN			STM_CARDSTATUS_VPP_FAILUREN
#define TPE_WRITEPRINTED_NONE					0
#define TPE_WRITEPRINTED_COMPLETED				1

typedef struct
{
	BYTE	byWriteWrite;
	BYTE	byWritePrint;
	char	szWriteTicketHeader[TPE_WRITETICKETHEADER_SIZE];
	char	szWriteTicketName[TPE_WRITETICKETNAME_SIZE];
	char	szWriteTicketLocation[TPE_WRITETICKETLOCATION_SIZE];
	char	szWriteMerchant[TPE_WRITEMERCHANT_SIZE];
	BYTE	byWriteTransactionType;
	char	szWriteApprovalCode[TPE_WRITEAPPROVALCODE_SIZE];
	char	szWriteCardType[TPE_WRITECARDTYPE_SIZE];
	WORD	wWriteSystem;
	WORD	wWriteTerminal;
	WORD	wWriteTransaction;
	BYTE	abyAlign[2];
} TPE_WRITE_QUERY;

typedef struct
{
	BYTE	byWriteWritten;
	BYTE	byWritePrinted;
	char	szWriteCertificate[TPE_WRITECERTIFICATE_SIZE];
	BYTE	abyAlign[1];
} TPE_WRITE_REPLY, FAR* TPE_LPWRITE_REPLY;

#define TPE_LOCKCARDNUMBER_SIZE		(19 + 1)
#define TPE_LOCKTEXT_SIZE			(20 + 1)
#define TPE_LOCKCODE_CARD_LOCKED	0
#define TPE_LOCKCODE_FULL_PIN		1
#define TPE_LOCKCODE_VPP_FAILURE	2

typedef struct
{
	char	szLockCardNumber[TPE_LOCKCARDNUMBER_SIZE];
} TPE_LOCK_QUERY;

typedef struct
{
	BYTE	byLockCode;
	char	szLockText[TPE_LOCKTEXT_SIZE];
	BYTE	abyAlign[2];
} TPE_LOCK_REPLY, FAR* TPE_LPLOCK_REPLY;

#define	TPE_ANSWERTYPE_STATUS		1
#define	TPE_ANSWERTYPE_READ_REPLY	2
#define	TPE_ANSWERTYPE_MESSAGE		3
#define	TPE_ANSWERTYPE_LOCK_REPLY	4
#define	TPE_ANSWERTYPE_WRITE_REPLY	5

typedef struct
{
	TPE_READ_QUERY	Query;
	BYTE			byAnswerType;
	BYTE			abyAlign[3];
	TPE_READ_REPLY	Reply;
	TPE_STATUS		Status;
	TPE_MESSAGE		Message;
} TPE_READ, FAR* TPE_LPREAD;

typedef struct
{
	TPE_WRITE_QUERY	Query;
	BYTE			byAnswerType;
	BYTE			abyAlign[3];
	TPE_WRITE_REPLY	Reply;
	TPE_STATUS		Status;
} TPE_WRITE, FAR* TPE_LPWRITE;

typedef struct
{
	TPE_LOCK_QUERY	Query;
	BYTE			byAnswerType;
	BYTE			abyAlign[3];
	TPE_LOCK_REPLY	Reply;
	TPE_STATUS		Status;
} TPE_LOCK, FAR* TPE_LPLOCK;

/*****
* Fonctions
*   Note: Les timeouts sont exprimés en millisecondes
*****/

#ifdef __cplusplus
extern "C" {
#endif

/* Initialisation du TPE et retour à l'état repos */
STM95DLL_API BOOL WINAPI TPE_Reset(LPCSTR lpszPortName);

/* Fermeture de la connexion avec le TPE */
STM95DLL_API BOOL WINAPI TPE_Close();

/* Lecture de l'état du TPE */
STM95DLL_API BOOL WINAPI TPE_GetStatus(	DWORD dwTimeout,
										TPE_LPSTATUS lpStatus );

/* Lecture d'une carte sur le TPE */
STM95DLL_API BOOL WINAPI TPE_ReadCard(	DWORD dwTimeout,
										TPE_LPREAD lpRead,
										STM_LPDATETIME lpDateTime );

/* Ecriture d'une transaction et/ou impression du ticket sur le TPE */
STM95DLL_API BOOL WINAPI TPE_WriteCard(	DWORD dwTimeout,
										TPE_LPWRITE lpWrite );

/* Invalidation de la carte à puce insérée dans le TPE */
STM95DLL_API BOOL WINAPI TPE_LockCard(	DWORD dwTimeout,
										TPE_LPLOCK lpLock );

#ifdef __cplusplus
}
#endif

#endif /* __APITPE_H__ */
